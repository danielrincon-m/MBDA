CREATE OR REPLACE PACKAGE PC_PROBLEMA IS 
  /*PRUEBA*/
  PROCEDURE AD_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER);
  PROCEDURE MOD_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER);
  PROCEDURE ELI_PRUEBA (xID_PRUEBA  IN NUMBER);
  FUNCTION CO_PRUEBA  RETURN SYS_REFCURSOR;
   
  /*PROBLEMA*/  
  PROCEDURE AD_PROBLEMA  (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR);
  PROCEDURE MOD_PROBLEMA (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR);
  PROCEDURE ELI_PROBLEMA (xID_PROBLEMA  IN NUMBER);
  FUNCTION CO_PROBLEMA  RETURN SYS_REFCURSOR;
  FUNCTION CO_CO2 RETURN SYS_REFCURSOR;

END PC_PROBLEMA;

CREATE OR REPLACE PACKAGE BODY PC_PROBLEMA IS 
	PROCEDURE AD_PRUEBA(xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS 
		BEGIN
		  INSERT INTO  PRUEBAS(ID_PRUEBA,INPUT_CASE,OUTPUT_CASE,PROPOSITO,ID_PROBLEMA) VALUES(xID_PRUEBA,xINPUT_CASE,xOUTPUT_CASE,xPROPOSITO,xID_PROBLEMA);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en PRUEBAS.');
		END;
					
	PROCEDURE MOD_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS
		BEGIN
		  UPDATE PRUEBAS
				SET  INPUT_CASE = xINPUT_CASE ,OUTPUT_CASE = xOUTPUT_CASE ,PROPOSITO = xPROPOSITO ,ID_PROBLEMA  = xID_PROBLEMA
			WHERE xID_PRUEBA=ID_PRUEBA;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede actualizar en PRUEBAS.');
		END;
		
	PROCEDURE ELI_PRUEBA (xID_PRUEBA  IN NUMBER) IS
		BEGIN
		  DELETE   PRUEBAS  WHERE xID_PRUEBA  = ID_PRUEBA  ;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede eliminar en PRUEBAS.');
		END;

	FUNCTION CO_PRUEBA  RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			OPEN CO_PR  FOR
				SELECT * FROM PRUEBAS;
			RETURN CO_PR;
		END;
		
	PROCEDURE AD_PROBLEMA (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR) IS 
		BEGIN
		  INSERT INTO  PROBLEMAS(ID_PROBLEMA,NOMBRE,PDF,TIEMPO,MEMORIA,CREADOR,TEMA) VALUES(xID_PROBLEMA,xNOMBRE,xPDF,xTIEMPO,xMEMORIA,xCREADOR,xTEMA);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en PROBLEMAS.');
		END;
		
	PROCEDURE MOD_PROBLEMA (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR) IS 
		BEGIN
		  UPDATE  PROBLEMAS SET ID_PROBLEMA = xID_PROBLEMA ,NOMBRE = xNOMBRE,PDF = xPDF ,TIEMPO = xTIEMPO,MEMORIA =xMEMORIA ,CREADOR =xCREADOR,TEMA = xTEMA WHERE xID_PROBLEMA = ID_PROBLEMA;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede actualizar en PROBLEMAS.');
		END;
		
	PROCEDURE ELI_PROBLEMA (xID_PROBLEMA  IN NUMBER) IS
		BEGIN
		  DELETE   PROBLEMAS  WHERE xID_PROBLEMA  = ID_PROBLEMA ;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede eliminar en PROBLEMAS.');
		END;
		
	FUNCTION CO_PROBLEMA  RETURN SYS_REFCURSOR IS CO_PRO SYS_REFCURSOR;
		BEGIN
			OPEN CO_PRO  FOR
				SELECT * FROM PROBLEMAS;
			RETURN CO_PRO;
		END;	
		
		
		
	FUNCTION CO_CO2  RETURN SYS_REFCURSOR IS CO_CON2 SYS_REFCURSOR;
		BEGIN
			OPEN CO_CON2  FOR						
				SELECT DISTINCT USERNAME,U.NOMBRE,ID_PROBLEMA,P.NOMBRE  FROM USUARIOS U,PROBLEMAS  P
					WHERE P.CREADOR= USERNAME;
			RETURN CO_CON2;
	END;	
		
		


END PC_PROBLEMA;
