CREATE OR REPLACE PACKAGE BODY PA_ADMIN IS
	PROCEDURE AD_Asociacion (xnombre IN VARCHAR , xacreditacion IN NUMBER, xproposito IN VARCHAR,xlugar IN NUMBER) IS
		BEGIN
			PC_ASOCIACION.AD_Asociacion (xnombre, xacreditacion, xproposito,xlugar);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20132,'No se puede insertar en asociacion.');
	END;
	
	PROCEDURE MOD_Asociacion (xID_Asociacion IN NUMBER,xacreditacion IN NUMBER,xlugar IN NUMBER) IS
		BEGIN
			PC_ASOCIACION.MOD_Asociacion (xID_Asociacion ,xacreditacion ,xlugar);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20232,'No se puede modificar en asociacion.');
	END;
		
	PROCEDURE EL_Asociacion (xID_Asociacion IN NUMBER) IS
		BEGIN
			PC_ASOCIACION.EL_Asociacion(xID_Asociacion);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20242,'No se puede eliminar en asociacion.');
	END;
	
	PROCEDURE AD_REALIZAN (xid_evento IN NUMBER, xid_asociacion IN NUMBER) IS
		BEGIN
			PC_ASOCIACION.AD_REALIZAN (xid_evento,xid_asociacion);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20532,'No se puede insertar en realizan.');
	END;

	FUNCTION MAYOR_INGRESO RETURN SYS_REFCURSOR IS CO_PROB1 SYS_REFCURSOR;
		BEGIN
			CO_PROB1 :=PC_ASOCIACION.MAYOR_INGRESO;
		RETURN CO_PROB1;
	END;
	

END PA_ADMIN;
/
CREATE OR REPLACE PACKAGE BODY PA_ASOCIACION IS
	
	/*CICLO 1*/
	PROCEDURE AD_ASOCIACION_USUARIO (xUSERNAME IN  VARCHAR,xNOMBRE IN  VARCHAR,xCORREO IN  VARCHAR,xFECHA  IN DATE,xTELEFONO IN  NUMBER,xOCUPACION IN  VARCHAR,xESTADO  IN VARCHAR,xLUGAR IN NUMBER,xPerfil IN XMLTYPE) IS
		BEGIN
			PC_USUARIO.AD_USUARIO(xUSERNAME,xNOMBRE,xCORREO,xFECHA,xTELEFONO,xOCUPACION,xESTADO,xLUGAR,xPerfil);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en USUARIOS.');
	END;
			
	PROCEDURE MOD_ASOCIACION_USUARIO (xUSERNAME IN  VARCHAR,xNOMBRE IN  VARCHAR,xCORREO IN  VARCHAR,xTELEFONO IN  NUMBER,xOCUPACION IN  VARCHAR,xESTADO  IN VARCHAR,xLUGAR IN NUMBER,xPerfil IN XMLTYPE) IS
		BEGIN
			PC_USUARIO.MOD_USUARIO(xUSERNAME,xNOMBRE,xCORREO,xTELEFONO,xOCUPACION,xESTADO,xLUGAR,xPerfil);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede modificar en USUARIOS.');
	END;
	
	
	PROCEDURE ELI_ASOCIACION_USUARIO (xUSERNAME IN  VARCHAR) IS
		BEGIN
			PC_USUARIO.ELI_USUARIO(xUSERNAME);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en USUARIOS.');
	END;

	
	FUNCTION CO_ASOCIACION_USUARIOS RETURN SYS_REFCURSOR IS CO_US SYS_REFCURSOR;
		BEGIN
			CO_US := PC_USUARIO.CO_USUARIOS;
		RETURN CO_US;
	END;


	PROCEDURE AD_ASOCIACION_PROBLEMA  (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR) IS
		BEGIN
			PC_PROBLEMA.AD_PROBLEMA(xID_PROBLEMA,xNOMBRE,xPDF,xTIEMPO,xMEMORIA,xCREADOR,xTEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en PROBLEMAS.');
	END;
	
	PROCEDURE MOD_ASOCIACION_PROBLEMA (xID_PROBLEMA  IN NUMBER,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xTEMA  IN VARCHAR) IS
		BEGIN
			PC_PROBLEMA.MOD_PROBLEMA (xID_PROBLEMA,xTIEMPO,xMEMORIA,xTEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede modificar en PROBLEMAS.');
	END;
	
	PROCEDURE ELI_ASOCIACION_PROBLEMA (xID_PROBLEMA  IN NUMBER) IS
		BEGIN
			PC_PROBLEMA.ELI_PROBLEMA (xID_PROBLEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PROBLEMAS.');
	END;

	FUNCTION CO_ASOCIACION_PROBLEMA  RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			CO_PR := PC_PROBLEMA.CO_PROBLEMA;
		RETURN CO_PR;
	END;

	
	PROCEDURE AD_ASOCIACION_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS
		BEGIN
			PC_PROBLEMA.AD_PRUEBA(xID_PRUEBA, xINPUT_CASE, xOUTPUT_CASE,xPROPOSITO,xID_PROBLEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en PRUEBAS.');
	END;
	
	PROCEDURE MOD_ASOCIACION_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS
		BEGIN
			PC_PROBLEMA.MOD_PRUEBA(xID_PRUEBA, xINPUT_CASE, xOUTPUT_CASE,xPROPOSITO,xID_PROBLEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede modificar en PRUEBAS.');
	END;
	
	PROCEDURE ELI_ASOCIACION_PRUEBA (xID_PRUEBA IN NUMBER) IS
		BEGIN
			PC_PROBLEMA.ELI_PRUEBA(xID_PRUEBA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
	END;
	
	FUNCTION CO_ASOCIACION_PRUEBA  RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			CO_PR := PC_PROBLEMA.CO_PRUEBA;
		RETURN CO_PR;
	END;

	PROCEDURE AD_ASOCIACION_GRUPO (xNOMBRE IN VARCHAR, xCREADOR IN VARCHAR) IS
		BEGIN
			PC_GRUPO.AD_GRUPO (xNOMBRE, xCREADOR);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
	END;
			
	PROCEDURE MOD_ASOCIACION_GRUPO (xID_GRUPO IN NUMBER, xNOMBRE IN VARCHAR) IS
		BEGIN
			PC_GRUPO.MOD_GRUPO (xID_GRUPO,xNOMBRE);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
	END;
	
	PROCEDURE AD_ASOCIACION_TIENE (xID_GRUPO IN NUMBER, xID_TEMA IN VARCHAR) IS
		BEGIN
			PC_GRUPO.AD_TIENE (xID_GRUPO,xID_TEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
	END;
	
	PROCEDURE AD_ASOCIACION_PERTENECE (xID_USUARIO IN VARCHAR, xID_GRUPO IN NUMBER) IS
		BEGIN
				PC_GRUPO.AD_PERTENECE (xID_USUARIO,xID_GRUPO);
			COMMIT;
			EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
				RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
		END;
	
	PROCEDURE EL_ASOCIACION_PERTENECE (xID_USUARIO IN VARCHAR, xID_GRUPO IN NUMBER) IS
		BEGIN
			PC_GRUPO.EL_PERTENECE (xID_USUARIO, xID_GRUPO);
			COMMIT;
			EXCEPTION
			WHEN OTHERS THEN
				ROLLBACK;
				RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
		END;		
			
	FUNCTION CO_ASOCIACION_GRUPO RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			CO_PR := PC_GRUPO.CO_GRUPO;
		RETURN CO_PR;
	END;
	
	FUNCTION CONS_ASOCIOACION_GRUPO RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			CO_PR := PC_GRUPO.CONS_GRUPO;
		RETURN CO_PR;
	END;

	FUNCTION CO_ASOCIOACION_TIENE RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
			BEGIN
				CO_PR := PC_GRUPO.CO_TIENE;
			RETURN CO_PR;
		END;

	FUNCTION CO_ASOCIOACION_PERTENECE RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
			BEGIN
				CO_PR := PC_GRUPO.CO_PERTENECE;
			RETURN CO_PR;
	END;

	PROCEDURE AD_ASOCIACION_TEMA (xID_TEMA IN VARCHAR, xNOMBRE IN VARCHAR, xPADRE IN VARCHAR) IS
		BEGIN
			PC_TEMA.AD_TEMA(xID_TEMA, xNOMBRE, xPADRE);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20032,'No se puede eliminar en PRUEBAS.');
	END;
	
	FUNCTION  CO_ASOCIACION_TEMA RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
			BEGIN
				CO_PR := PC_TEMA.CO_TEMA;
			RETURN CO_PR;
	END;
	/*CICLO 2*/
	PROCEDURE AD_EVENTO (xid_evento IN NUMBER,xnombre IN VARCHAR, xnivel IN VARCHAR, xfecha IN DATE, xfechafin IN DATE,xcantidad_equipos IN NUMBER, xclase IN VARCHAR, xcosto IN NUMBER, xlugar IN NUMBER, xcapacidad_maxima IN NUMBER) IS
		BEGIN
			PC_EVENTO.AD_EVENTO(xid_evento,xnombre , xnivel , xfecha , xfechafin,xcantidad_equipos, xclase, xcosto , xlugar , xcapacidad_maxima );
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20632,'No se puede insertar en evento.');
	END;

	PROCEDURE AD_TIENE (xproblema IN NUMBER, xevento IN NUMBER) IS
		BEGIN
			PC_EVENTO.AD_TIENE (xproblema,xevento);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20552,'No se puede insertar en tiene.');
	END;

	FUNCTION MEJOR_EQUIPO RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.MEJOR_EQUIPO;
		RETURN CO_CO;
	END;

	FUNCTION RESULTADO_SCORE (xid_evento IN NUMBER)  RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.RESULTADO_SCORE(xid_evento);
		RETURN CO_CO;
	END;

	FUNCTION CONFERENCIAS RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.CONFERENCIAS;
		RETURN CO_CO;
	END;

	FUNCTION PREPARACION RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.PREPARACION;
		RETURN CO_CO;
	END;

	FUNCTION FACT_ECONO RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.FACT_ECONO;
		RETURN CO_CO;
	END;

	FUNCTION PROBLEMAS (xid_evento IN NUMBER) RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.PROBLEMAS(xid_evento);
		RETURN CO_CO;
	END;

END PA_ASOCIACION;
/
CREATE OR REPLACE PACKAGE BODY PA_LIDER_EQUIPO IS
	PROCEDURE AD_INSCRIPCION (xvalor IN NUMBER, xequipo IN NUMBER, xevento IN NUMBER) IS
		BEGIN
			PC_EVENTO.AD_INSCRIPCION(xvalor,xequipo,xevento);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20612,'No se puede insertar en inscripcion.');
	END;
	
	PROCEDURE AD_ENVIOS (xproblema IN NUMBER, xequipo IN NUMBER, xevento IN NUMBER, xlenguage IN VARCHAR) IS
		BEGIN
			PC_ENVIOS.AD_ENVIOS(xproblema,xequipo,xevento,xlenguage);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20611,'No se puede insertar en envios.');
	END;
	
	PROCEDURE AD_VEREDICTO (xtiempo IN NUMBER, xlenguage IN VARCHAR, xresultado IN VARCHAR, xenvio IN NUMBER, xproblema IN NUMBER, xusuario IN VARCHAR) IS
		BEGIN
			PC_ENVIOS.AD_VEREDICTO(xtiempo ,xlenguage, xresultado, xenvio, xproblema, xusuario);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20611,'No se puede insertar en veredicto.');
	END;

	FUNCTION MEJOR_EQUIPO RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.MEJOR_EQUIPO;
		RETURN CO_CO;
	END;

	FUNCTION RESULTADO_SCORE (xid_evento IN NUMBER)  RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.RESULTADO_SCORE(xid_evento);
		RETURN CO_CO;
	END;

	FUNCTION CONFERENCIAS RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.CONFERENCIAS;
		RETURN CO_CO;
	END;

	FUNCTION PREPARACION RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.PREPARACION;
		RETURN CO_CO;
	END;

	FUNCTION FACT_ECONO RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.FACT_ECONO;
		RETURN CO_CO;
	END;

	FUNCTION PROBLEMAS (xid_evento IN NUMBER) RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
			CO_CO :=PC_EVENTO.PROBLEMAS(xid_evento);
		RETURN CO_CO;
	END;
	
END PA_LIDER_EQUIPO;

