CREATE OR REPLACE PACKAGE BODY PC_COMENTARIOS IS 

	PROCEDURE AD_COMENTARIOS(xID_COMENTARIO IN NUMBER, xEXPLICACION  IN VARCHAR,xFECHA IN DATE,xGRUPO IN NUMBER,xUSUARIO  IN VARCHAR,xPROBLEMA  IN  NUMBER,xID_COMENTARIO_RESPUESTA IN NUMBER) IS 
		BEGIN
		  INSERT INTO  COMENTARIOS(ID_COMENTARIO,EXPLICACION,FECHA,GRUPO,USUARIO,PROBLEMA,ID_COMENTARIO_RESPUESTA) VALUES(xID_COMENTARIO,xEXPLICACION,xFECHA,xGRUPO,xUSUARIO,xPROBLEMA,xID_COMENTARIO_RESPUESTA);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en usuarios.');
		END;

	FUNCTION CO_COMENTARIOS  RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR;
		BEGIN
		OPEN CO_CO  FOR
			SELECT * FROM COMENTARIOS;
		RETURN CO_CO;
	END;
	
	
	FUNCTION CO_CO4(xTest IN VARCHAR)  RETURN SYS_REFCURSOR IS CO_CON4 SYS_REFCURSOR;
		BEGIN
		OPEN CO_CON4  FOR
			SELECT DISTINCT * FROM COMENTARIOS C,PROBLEMAS P
				WHERE ID_PROBLEMA = PROBLEMA AND CREADOR <>xTest AND USUARIO= xTest;
		RETURN CO_CON4;
	END;
	
	FUNCTION CO_CO5(xTest IN NUMBER)  RETURN SYS_REFCURSOR IS CO_CON5 SYS_REFCURSOR;
		BEGIN
		OPEN CO_CON5  FOR
			SELECT DISTINCT * FROM PROBLEMAS,COMENTARIOS 
				WHERE ID_PROBLEMA= xTest;
		RETURN CO_CON5;
	END;
	
END PC_COMENTARIOS;
/

CREATE OR REPLACE PACKAGE BODY PC_EQUIPO IS
	
	PROCEDURE AD_EQUIPO (xNOMBRE IN VARCHAR,xLUGAR IN NUMBER) IS
		BEGIN
		INSERT INTO EQUIPOS (ID_EQUIPO,NOMBRE,LUGAR) VALUES (SEQ_EQUIPOS.NEXTVAL,xNOMBRE,xLUGAR);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en equipo.');
	END;
	
	PROCEDURE MOD_EQUIPO (xID_EQUIPO IN NUMBER) IS
		BEGIN
		UPDATE EQUIPOS SET FECHA_FIN= SYSDATE WHERE ID_EQUIPO= xID_EQUIPO;
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR (-20021,'No se puede modificar el equipo.');
	END;
	
	PROCEDURE AD_PERTENECE_EQU (xID_USUARIO IN VARCHAR,xID_EQUIPO IN NUMBER) IS
		BEGIN
		INSERT INTO PERTENECE_EQUIPO (ID_USUARIO,ID_EQUIPO) VALUES (xID_USUARIO,xID_EQUIPO) ;
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20033,'No se puede insertar en pertenece a equipo.');
	END;
	
	FUNCTION CO_EQUI (xNOMBRE IN VARCHAR) RETURN SYS_REFCURSOR IS CON_EQUI SYS_REFCURSOR;
		BEGIN
		OPEN CON_EQUI FOR
			SELECT * FROM USUARIOS,(SELECT * FROM PERTENECE_EQUIPO
			WHERE ID_EQUIPO= (SELECT ID_EQUIPO FROM PERTENECE_EQUIPO WHERE ID_USUARIO= xNOMBRE AND ROWNUM <= 1)) 
			WHERE USERNAME= ID_USUARIO;	
		RETURN CON_EQUI;
	END;
	
	
	FUNCTION CONS_EQUI RETURN SYS_REFCURSOR IS CON_EQUI SYS_REFCURSOR;
		BEGIN
		OPEN CON_EQUI FOR
			SELECT * FROM EQUIPOS;
		RETURN CON_EQUI;
	END;
	
	FUNCTION CON_PERTENECE RETURN SYS_REFCURSOR IS CO_PERTENECE SYS_REFCURSOR;
		BEGIN
		OPEN CO_PERTENECE FOR
			SELECT * FROM PERTENECE_EQUIPO;
		RETURN CO_PERTENECE;
	END;
	
END PC_EQUIPO;
/

CREATE OR REPLACE PACKAGE BODY PC_GRUPO IS

	PROCEDURE AD_GRUPO (xNOMBRE IN VARCHAR, xCREADOR IN VARCHAR) IS
		BEGIN
		INSERT INTO GRUPOS (ID_GRUPO,NOMBRE,CREADOR) VALUES (SEQ_GRUPOS.NEXTVAL,xNOMBRE,xCREADOR);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en grupos.');
	END;
	
	PROCEDURE MOD_GRUPO (xID_GRUPO IN NUMBER, xNOMBRE IN VARCHAR) IS
		BEGIN
		UPDATE GRUPOS SET NOMBRE= xNOMBRE WHERE ID_GRUPO= xID_GRUPO;
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR (-20021,'No se puede modificar el grupo.');
	END;
	
	PROCEDURE AD_TIENE (xID_GRUPO IN NUMBER, xID_TEMA IN VARCHAR) IS
		BEGIN
		INSERT INTO GRUPO_TIENE_TEMA (ID_GRUPO,ID_TEMA) VALUES (xID_GRUPO,xID_TEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20033,'No se puede insertar en grupo tiene tema.');
	END;
	

	PROCEDURE AD_PERTENECE (xID_USUARIO IN VARCHAR, xID_GRUPO IN NUMBER) IS 
		BEGIN 
		INSERT INTO PERTENECE_GRUPO (ID_USUARIO,ID_GRUPO) VALUES (xID_USUARIO,xID_GRUPO);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20033,'No se puede insertar en pertenece grupo.');
	END;
	
	PROCEDURE EL_PERTENECE (xID_USUARIO IN VARCHAR, xID_GRUPO IN NUMBER) IS
		BEGIN
		DELETE FROM PERTENECE_GRUPO WHERE ID_GRUPO= xID_GRUPO AND ID_USUARIO= xID_USUARIO;
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20013,'No se puede eliminar este usuario.');
	END;

	FUNCTION CO_GRUPO RETURN SYS_REFCURSOR IS CON_GRUPO SYS_REFCURSOR;
		BEGIN
		OPEN CON_GRUPO FOR
			SELECT DISTINCT USERNAME,U.NOMBRE,ID_GRUPO,G.NOMBRE  FROM USUARIOS U,GRUPOS  G
			WHERE G.CREADOR= USERNAME;
		RETURN CON_GRUPO;
	END;
	
	FUNCTION CONS_GRUPO RETURN SYS_REFCURSOR IS CO_GRUP SYS_REFCURSOR;
		BEGIN 
		OPEN CO_GRUP FOR
			SELECT * FROM GRUPOS;
		RETURN CO_GRUP;
	END;
	
	FUNCTION CO_TIENE RETURN SYS_REFCURSOR IS CON_TIENE SYS_REFCURSOR;
		BEGIN
		OPEN CON_TIENE FOR
			SELECT * FROM GRUPO_TIENE_TEMA;
		RETURN CON_TIENE;
	END;
	
	FUNCTION CO_PERTENECE RETURN SYS_REFCURSOR IS CON_PERTENECE SYS_REFCURSOR;
		BEGIN
		OPEN CON_PERTENECE FOR
			SELECT * FROM PERTENECE_GRUPO;
		RETURN CON_PERTENECE;
	END;
	
END PC_GRUPO;

/
CREATE OR REPLACE PACKAGE BODY PC_PROBLEMA IS 
	PROCEDURE AD_PRUEBA(xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS 
		BEGIN
		  INSERT INTO  PRUEBAS(ID_PRUEBA,INPUT_CASE,OUTPUT_CASE,PROPOSITO,ID_PROBLEMA) VALUES(xID_PRUEBA,xINPUT_CASE,xOUTPUT_CASE,xPROPOSITO,xID_PROBLEMA);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en PRUEBAS.');
		END;
					
	PROCEDURE MOD_PRUEBA (xID_PRUEBA  IN NUMBER, xINPUT_CASE  IN VARCHAR, xOUTPUT_CASE  IN VARCHAR,xPROPOSITO  IN VARCHAR,xID_PROBLEMA IN NUMBER) IS
		BEGIN
		  UPDATE PRUEBAS
				SET  INPUT_CASE = xINPUT_CASE ,OUTPUT_CASE = xOUTPUT_CASE ,PROPOSITO = xPROPOSITO ,ID_PROBLEMA  = xID_PROBLEMA
			WHERE xID_PRUEBA=ID_PRUEBA;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede actualizar en PRUEBAS.');
		END;
		
	PROCEDURE ELI_PRUEBA (xID_PRUEBA  IN NUMBER) IS
		BEGIN
		  DELETE   PRUEBAS  WHERE xID_PRUEBA  = ID_PRUEBA  ;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede eliminar en PRUEBAS.');
		END;

	FUNCTION CO_PRUEBA  RETURN SYS_REFCURSOR IS CO_PR SYS_REFCURSOR;
		BEGIN
			OPEN CO_PR  FOR
				SELECT * FROM PRUEBAS;
			RETURN CO_PR;
		END;
		
	PROCEDURE AD_PROBLEMA (xID_PROBLEMA  IN NUMBER,xNOMBRE  IN VARCHAR,xPDF IN  VARCHAR,xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xCREADOR IN VARCHAR,xTEMA  IN VARCHAR) IS 
		BEGIN
		  INSERT INTO  PROBLEMAS(ID_PROBLEMA,NOMBRE,PDF,TIEMPO,MEMORIA,CREADOR,TEMA) VALUES(xID_PROBLEMA,xNOMBRE,xPDF,xTIEMPO,xMEMORIA,xCREADOR,xTEMA);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en PROBLEMAS.');
		END;
		
	PROCEDURE MOD_PROBLEMA (xID_PROBLEMA  IN NUMBER, xTIEMPO IN NUMBER,xMEMORIA  IN VARCHAR,xTEMA  IN VARCHAR) IS 
		BEGIN
		  UPDATE  PROBLEMAS SET TIEMPO = xTIEMPO,MEMORIA =xMEMORIA , TEMA = xTEMA WHERE xID_PROBLEMA = ID_PROBLEMA;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede actualizar en PROBLEMAS.');
		END;
		
	PROCEDURE ELI_PROBLEMA (xID_PROBLEMA  IN NUMBER) IS
		BEGIN
		  DELETE   PROBLEMAS  WHERE xID_PROBLEMA  = ID_PROBLEMA ;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede eliminar en PROBLEMAS.');
		END;
		
	FUNCTION CO_PROBLEMA  RETURN SYS_REFCURSOR IS CO_PRO SYS_REFCURSOR;
		BEGIN
			OPEN CO_PRO  FOR
				SELECT * FROM PROBLEMAS;
			RETURN CO_PRO;
		END;	
		
		
		
	FUNCTION CO_CO2  RETURN SYS_REFCURSOR IS CO_CON2 SYS_REFCURSOR;
		BEGIN
			OPEN CO_CON2  FOR						
				SELECT DISTINCT USERNAME,U.NOMBRE,ID_PROBLEMA,P.NOMBRE  FROM USUARIOS U,PROBLEMAS  P
					WHERE P.CREADOR= USERNAME;
			RETURN CO_CON2;
	END;	
		
END PC_PROBLEMA;
/
CREATE OR REPLACE PACKAGE BODY PC_TEMA IS
	PROCEDURE AD_TEMA (xID_TEMA IN VARCHAR, xNOMBRE IN VARCHAR, xPADRE IN VARCHAR) IS
	BEGIN
		INSERT INTO TEMAS (ID_TEMA,NOMBRE,PADRE) VALUES (xID_TEMA,xNOMBRE,xPADRE);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR (-20021,'No se puede insertar el tema.');
	END;
	FUNCTION CO_TEMA RETURN SYS_REFCURSOR IS CON_TEMA SYS_REFCURSOR;
		BEGIN
			OPEN CON_TEMA FOR
				SELECT * FROM TEMAS;
			RETURN CON_TEMA;
		END;
END PC_TEMA;
/
CREATE OR REPLACE PACKAGE BODY PC_USUARIO IS 

	PROCEDURE AD_USUARIO(xUSERNAME IN  VARCHAR,xNOMBRE IN  VARCHAR,xCORREO IN  VARCHAR,xFECHA  IN DATE,xTELEFONO IN  NUMBER,xOCUPACION IN  VARCHAR,xESTADO  IN VARCHAR,xLUGAR IN NUMBER,xPerfil IN XMLTYPE) IS 
		BEGIN
		  INSERT INTO  USUARIOS(USERNAME,NOMBRE,CORREO,FECHA,TELEFONO,OCUPACION,ESTADO,LUGAR,Perfil) VALUES(xUSERNAME,xNOMBRE,xCORREO,TO_DATE(xFECHA,'yyyy/mm/dd'),xTELEFONO,xOCUPACION,xESTADO,xLUGAR,xPerfil);
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede insertar en usuarios.');
		END;
	PROCEDURE MOD_USUARIO (xUSERNAME IN  VARCHAR,xNOMBRE IN  VARCHAR,xCORREO IN  VARCHAR,xTELEFONO IN  NUMBER,xOCUPACION IN  VARCHAR,xESTADO  IN VARCHAR,xLUGAR IN NUMBER,xPerfil IN XMLTYPE) IS
		BEGIN
		  UPDATE USUARIOS
			SET NOMBRE = xNOMBRE ,CORREO = xCORREO ,TELEFONO = xTELEFONO ,OCUPACION = xOCUPACION ,ESTADO = xESTADO,LUGAR = xLUGAR,Perfil = xPerfil
	  WHERE xUSERNAME=USERNAME;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede actualizar en usuarios.');
		END;
	PROCEDURE ELI_USUARIO (xUSERNAME IN  VARCHAR) IS
		BEGIN
		  DELETE   USUARIOS  WHERE xUSERNAME=USERNAME;
		  COMMIT;
		  EXCEPTION 
		  WHEN OTHERS THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20010, 'No se puede eliminar en usuarios.');
		END;
		
	FUNCTION CO_USUARIOS  RETURN SYS_REFCURSOR IS CO_US SYS_REFCURSOR;
		BEGIN
			OPEN CO_US  FOR
			SELECT * FROM USUARIOS;
			RETURN CO_US;
	END;

	
	
	FUNCTION CO_CO6  RETURN SYS_REFCURSOR IS CO_US SYS_REFCURSOR;
		BEGIN
			OPEN CO_US  FOR
			
			SELECT * FROM (SELECT username,nombre,correo,ocupacion,lugar,fecha,telefono
					FROM  usuarios, XMLTABLE('/Perfil/estudios/estudio[@nombre = "Ingeniería de sistemas"]'
						passing perfil
						columns temp NUMBER PATH  '@nombre')) ;		
			RETURN CO_US;
	END;
	
	
	
	
	FUNCTION CO_CO7  RETURN SYS_REFCURSOR IS CO_US SYS_REFCURSOR;
		BEGIN
			OPEN CO_US  FOR
			SELECT * FROM (SELECT username,nombre,correo,ocupacion,lugar,fecha,telefono
					FROM  usuarios, XMLTABLE('/Perfil/proyectos/proyecto[@nombre = "TEAM"]'
						passing perfil
						columns temp NUMBER PATH  '@nombre')) ;
			RETURN CO_US;
	END;
	
	
	
END PC_USUARIO;
/
CREATE OR REPLACE PACKAGE BODY PC_RGRUPO IS

	PROCEDURE AD_GRUPO (xNOMBRE IN VARCHAR, xCREADOR IN VARCHAR) IS
		BEGIN
		INSERT INTO GRUPOS (ID_GRUPO,NOMBRE,CREADOR) VALUES (SEQ_GRUPOS.NEXTVAL,xNOMBRE,xCREADOR);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20032,'No se puede insertar en grupos.');
	END;

	
	PROCEDURE AD_TIENE (xID_GRUPO IN NUMBER, xID_TEMA IN VARCHAR) IS
		BEGIN
		INSERT INTO GRUPO_TIENE_TEMA (ID_GRUPO,ID_TEMA) VALUES (xID_GRUPO,xID_TEMA);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20033,'No se puede insertar en grupo tiene tema.');
	END;
	

	PROCEDURE AD_PERTENECE (xID_USUARIO IN VARCHAR, xID_GRUPO IN NUMBER) IS 
		BEGIN 
		INSERT INTO PERTENECE_GRUPO (ID_USUARIO,ID_GRUPO) VALUES (xID_USUARIO,xID_GRUPO);
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
		ROLLBACK;
		RAISE_APPLICATION_ERROR(-20033,'No se puede insertar en pertenece grupo.');
	END;
	

	FUNCTION CO_GRUPO RETURN SYS_REFCURSOR IS CON_GRUPO SYS_REFCURSOR;
		BEGIN
		OPEN CON_GRUPO FOR
			SELECT DISTINCT USERNAME,U.NOMBRE,ID_GRUPO,G.NOMBRE  FROM USUARIOS U,GRUPOS  G
			WHERE G.CREADOR= USERNAME;
		RETURN CON_GRUPO;
	END;
	
	FUNCTION CONS_GRUPO RETURN SYS_REFCURSOR IS CO_GRUP SYS_REFCURSOR;
		BEGIN 
		OPEN CO_GRUP FOR
			SELECT * FROM GRUPOS;
		RETURN CO_GRUP;
	END;
	
	FUNCTION CO_TIENE RETURN SYS_REFCURSOR IS CON_TIENE SYS_REFCURSOR;
		BEGIN
		OPEN CON_TIENE FOR
			SELECT * FROM GRUPO_TIENE_TEMA;
		RETURN CON_TIENE;
	END;
	
	FUNCTION CO_PERTENECE RETURN SYS_REFCURSOR IS CON_PERTENECE SYS_REFCURSOR;
		BEGIN
		OPEN CON_PERTENECE FOR
			SELECT * FROM PERTENECE_GRUPO;
		RETURN CON_PERTENECE;
	END;
	
END PC_RGRUPO;






                   