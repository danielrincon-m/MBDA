Designing many dsings possible 
	* Usually many desings possible
	* Some are(Much) better than others!
	*How do we choose?

Ofthen use higher-level desing tools, but..
	*Some designers go straight to relations
	*Useful to understand why tools produce certain schemas

Design "anomalies"
	*Redundancy - capture info multiple times
	*update anomaly - update facts in different places but not all
	*Delection anomaly - surfing, unknowingly complete deletion of someone in a DB

Desing by decomposition
	*Start with "mega" relations containing everything 
	*Decompose into smaller, better relations with the same info.
	*Can do decomposition automatically
Automatic decomposition
	*"Mega" relations + properties of the data
	*System decomposes based on satisfies normal form
		- No anomalies, no lost information
Properties and Normal Forms
	-Functional dependencies => Boyce-Codd Normal Form
	-Multivalued dependences => Fourth Normal Form
Functional Dependencies and BCNF
	*Redundancy; Update & Delection Anoalies
	*Storing SSN-SName pair oncefor each college 
Functional Dependendy 
	*Same SSN always has same  sname
	*Should store each SSNÂ´S SNAME only once
Boyce-Codd Normal Form if A -> B then A is a key
	Decompose
Multivalued Dependencies and 4NF
	*Redundancy; Update & Delection Anoalies
	*Multuplicative effect
	*If not addressed by BCNF ----> No functional dependencies
	
Multivalued Dependency
	*if a---->>b then we'll get every combination of a with b
	*Multivalued dependecy is that we'll get every combination
	*Given SSN has every combination of Cname with HS
	*Should store each cname and each HS for an SSN once
	
Fourth Normal Form
	*If a---->>b then a is a key
	*Decompose

Desing by decomposition 
	*"Mega" relations + properties of the data
	*System decomposes based on properties
		
	*Final set of relstions satisfies normal form
		-- No anomalies, no lost information
	*Functional dependencies => Boyce-Codd Normal Form
	*Multivalued dependences => Fourth Normal Form
